"name","struct","description","modifier","macro","visibility","status","type","high","medium","low","info"
"from",,,,,"private","working","Function",,,,
"fmt",,,,,"private","working","Function",,,,
"fmt",,,,,"private","working","Function",,,,
"new","Pair",,"require!(fee == 0u128, only trade pools can have non zero fees); require!( asset_recipient.is_some(), invalid asset recipient account id ); require!(fee < MAX_FEE, trade fee exceed max); require!( asset_recipient.is_none(), asset recipient must be none for trade pools ); require!(this.curve.validate_delta(this.delta), invalid delta); require!( this.curve.validate_spot_price(this.spot_price), Invalid new spot price for curve ); ",,"public","working","Function",,,,
"deposit_and_mint_lp","Pair",,"require!( token_ids.len() as u128 * self.spot_price <= near_balance.clone(), invalid added liquidity ); ",,"public","working","Function",,,,
"internal_add_token_ids",,,"require!( self.pool_type != PoolType::Trade, not allowed to withdraw near directly from trading pool, need to burn lp token ); ",,"private","working","Function",,,,
"withdraw_near","Pair",,"require!( self.pool_type != PoolType::Trade, not allowed to withdraw nfts directly from trading pool, need to burn lp token ); ",,"public","working","Function",,,,
"withdraw_nfts","Pair",,"require!( self.token_ids_in_pools.get(token_id).is_some(), format!(token id {} not in pool, token_id) ); ",,"public","working","Function",,,,
"swap_near_for_any_nfts","Pair",,"require!( self.pool_type == PoolType::NFT || self.pool_type == PoolType::Trade, wrong pool type ); require!( num_nfts > 0 && num_nfts <= self.token_ids_in_pools.len(), ask for > 0 or less than equal nfts in pool ); ",,"public","working","Function",,,,
"swap_near_for_specific_nfts","Pair",,"require!( self.pool_type == PoolType::NFT || self.pool_type == PoolType::Trade, wrong pool type ); require!(nft_ids.len() > 0, must ask for > 0 nfts); require!( self.token_ids_in_pools.get(token_id).is_some(), format!(token id {} not in pool, token_id) ); ",,"public","working","Function",,,,
"swap_nfts_for_near","Pair",,"require!( self.pool_type == PoolType::Token || self.pool_type == PoolType::Trade, wrong pool type ); require!(nft_ids.len() > 0, ask for > 0); require!(output_amount >= min_near_out, insufficient liquidity); ",,"public","working","Function",,,,
"calculate_buy_info_and_update_pool",,,"require!( buy_info.input_value <= U256::from(max_expected_near_input), not enough near payment ); ",,"private","working","Function",,,,
"get_buy_info","Pair",,,,"internal","working","Function",,,,
"get_sell_info","Pair",,,,"internal","working","Function",,,,
"calculate_sell_info_and_update_pool",,,"require!( sell_info.output_value.as_u128() >= min_expected_near_output, out too little near ); ",,"private","working","Function",,,,
"lp_transfer","Pair",,,,"public","working","Function",,,,
"mint_lp",,,,,"private","working","Function",,,,
"burn_lp","Pair",,"require!( value_in_fraction_nft >= withdrawable_near.clone(), internal error in handling liquidity ); ",,"public","working","Function",,,,
"internal_register_account_lp","Pair",,,,"public","working","Function",,,,
"assert_owner","Pair",,"assert!( self.pool_type != PoolType::Trade, must not be trading pool ); ",,"internal","working","Function",,,,
"assert_not_trading_pool",,,,,"private","working","Function",,,,
"assert_release","Pair",,"require!( self.released_time <= timestamp_sec, Pool liquidity cannot release now ); ",,"internal","working","Function",,,,
"change_spot_price","Pair",,,,"public","working","Function",,,,
"change_delta","Pair",,,,"public","working","Function",,,,
"change_fee","Pair",,,,"public","working","Function",,,,
"change_asset_recipient","Pair",,,,"public","working","Function",,,,
"MAX_FEE",,,"N/A","N/A","public","working","u128",,,,
